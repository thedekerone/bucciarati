{"ast":null,"code":"\"use strict\";\n\nvar _Promise = require(\"@babel/runtime-corejs2/core-js/promise\");\n\nvar _Object$assign = require(\"@babel/runtime-corejs2/core-js/object/assign\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst url_1 = require(\"url\");\n\nconst mitt_1 = __importDefault(require(\"../mitt\"));\n\nconst utils_1 = require(\"../utils\");\n\nconst rewrite_url_for_export_1 = require(\"./rewrite-url-for-export\");\n\nconst route_matcher_1 = require(\"./utils/route-matcher\");\n\nconst route_regex_1 = require(\"./utils/route-regex\");\n\nconst is_dynamic_1 = require(\"./utils/is-dynamic\");\n\nfunction toRoute(path) {\n  return path.replace(/\\/$/, '') || '/';\n}\n\nclass Router {\n  constructor(pathname, query, as, {\n    initialProps,\n    pageLoader,\n    App,\n    wrapApp,\n    Component,\n    err,\n    subscription\n  }) {\n    this.onPopState = e => {\n      if (!e.state) {\n        // We get state as undefined for two reasons.\n        //  1. With older safari (< 8) and older chrome (< 34)\n        //  2. When the URL changed with #\n        //\n        // In the both cases, we don't need to proceed and change the route.\n        // (as it's already changed)\n        // But we can simply replace the state with the new changes.\n        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n        // So, doing the following for (1) does no harm.\n        const {\n          pathname,\n          query\n        } = this;\n        this.changeState('replaceState', utils_1.formatWithValidation({\n          pathname,\n          query\n        }), utils_1.getURL());\n        return;\n      } // Make sure we don't re-render on initial load,\n      // can be caused by navigating back from an external site\n\n\n      if (e.state.options && e.state.options.fromExternal) {\n        return;\n      } // If the downstream application returns falsy, return.\n      // They will then be responsible for handling the event.\n\n\n      if (this._bps && !this._bps(e.state)) {\n        return;\n      }\n\n      const {\n        url,\n        as,\n        options\n      } = e.state;\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (typeof url === 'undefined' || typeof as === 'undefined') {\n          console.warn('`popstate` event triggered but `event.state` did not have `url` or `as` https://err.sh/zeit/next.js/popstate-state-empty');\n        }\n      }\n\n      this.replace(url, as, options);\n    }; // represents the current component key\n\n\n    this.route = toRoute(pathname); // set up the component cache (by route keys)\n\n    this.components = {}; // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n\n    if (pathname !== '/_error') {\n      this.components[this.route] = {\n        Component,\n        props: initialProps,\n        err\n      };\n    }\n\n    this.components['/_app'] = {\n      Component: App\n    }; // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n    // @ts-ignore backwards compatibility\n\n    this.events = Router.events;\n    this.pageLoader = pageLoader;\n    this.pathname = pathname;\n    this.query = query; // if auto prerendered and dynamic route wait to update asPath\n    // until after mount to prevent hydration mismatch\n\n    this.asPath = // @ts-ignore this is temporarily global (attached to window)\n    is_dynamic_1.isDynamicRoute(pathname) && __NEXT_DATA__.nextExport ? pathname : as;\n    this.sub = subscription;\n    this.clc = null;\n    this._wrapApp = wrapApp;\n\n    if (false) {\n      // in order for `e.state` to work on the `onpopstate` event\n      // we have to register the initial route upon initialization\n      this.changeState('replaceState', utils_1.formatWithValidation({\n        pathname,\n        query\n      }), as);\n      window.addEventListener('popstate', this.onPopState);\n      window.addEventListener('unload', () => {\n        // Workaround for popstate firing on initial page load when\n        // navigating back from an external site\n        if (history.state) {\n          const {\n            url,\n            as,\n            options\n          } = history.state;\n          this.changeState('replaceState', url, as, _Object$assign({}, options, {\n            fromExternal: true\n          }));\n        }\n      });\n    }\n  } // @deprecated backwards compatibility even though it's a private method.\n\n\n  static _rewriteUrlForNextExport(url) {\n    return rewrite_url_for_export_1.rewriteUrlForNextExport(url);\n  }\n\n  update(route, mod) {\n    const Component = mod.default || mod;\n    const data = this.components[route];\n\n    if (!data) {\n      throw new Error(`Cannot update unavailable route: ${route}`);\n    }\n\n    const newData = _Object$assign({}, data, {\n      Component\n    });\n\n    this.components[route] = newData; // pages/_app.js updated\n\n    if (route === '/_app') {\n      this.notify(this.components[this.route]);\n      return;\n    }\n\n    if (route === this.route) {\n      this.notify(newData);\n    }\n  }\n\n  reload() {\n    window.location.reload();\n  }\n  /**\r\n   * Go back in history\r\n   */\n\n\n  back() {\n    window.history.back();\n  }\n  /**\r\n   * Performs a `pushState` with arguments\r\n   * @param url of the route\r\n   * @param as masks `url` for the browser\r\n   * @param options object you can define `shallow` and other options\r\n   */\n\n\n  push(url, as = url, options = {}) {\n    return this.change('pushState', url, as, options);\n  }\n  /**\r\n   * Performs a `replaceState` with arguments\r\n   * @param url of the route\r\n   * @param as masks `url` for the browser\r\n   * @param options object you can define `shallow` and other options\r\n   */\n\n\n  replace(url, as = url, options = {}) {\n    return this.change('replaceState', url, as, options);\n  }\n\n  change(method, _url, _as, options) {\n    return new _Promise((resolve, reject) => {\n      // marking route changes as a navigation start entry\n      if (utils_1.SUPPORTS_PERFORMANCE_USER_TIMING) {\n        performance.mark('routeChange');\n      } // If url and as provided as an object representation,\n      // we'll format them into the string version here.\n\n\n      const url = typeof _url === 'object' ? utils_1.formatWithValidation(_url) : _url;\n      let as = typeof _as === 'object' ? utils_1.formatWithValidation(_as) : _as; // Add the ending slash to the paths. So, we can serve the\n      // \"<page>/index.html\" directly for the SSR page.\n\n      if (process.env.__NEXT_EXPORT_TRAILING_SLASH) {\n        // @ts-ignore this is temporarily global (attached to window)\n        if (__NEXT_DATA__.nextExport) {\n          as = rewrite_url_for_export_1.rewriteUrlForNextExport(as);\n        }\n      }\n\n      this.abortComponentLoad(as); // If the url change is only related to a hash change\n      // We should not proceed. We should only change the state.\n      // WARNING: `_h` is an internal option for handing Next.js client-side\n      // hydration. Your app should _never_ use this property. It may change at\n      // any time without notice.\n\n      if (!options._h && this.onlyAHashChange(as)) {\n        this.asPath = as;\n        Router.events.emit('hashChangeStart', as);\n        this.changeState(method, url, as);\n        this.scrollToHash(as);\n        Router.events.emit('hashChangeComplete', as);\n        return resolve(true);\n      }\n\n      const {\n        pathname,\n        query,\n        protocol\n      } = url_1.parse(url, true);\n\n      if (!pathname || protocol) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`Invalid href passed to router: ${url} https://err.sh/zeit/next.js/invalid-href-passed`);\n        }\n\n        return resolve(false);\n      } // If asked to change the current URL we should reload the current page\n      // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n      // We also need to set the method = replaceState always\n      // as this should not go into the history (That's how browsers work)\n      // We should compare the new asPath to the current asPath, not the url\n\n\n      if (!this.urlIsNew(as)) {\n        method = 'replaceState';\n      } // @ts-ignore pathname is always a string\n\n\n      const route = toRoute(pathname);\n      const {\n        shallow = false\n      } = options;\n\n      if (is_dynamic_1.isDynamicRoute(route)) {\n        const {\n          pathname: asPathname\n        } = url_1.parse(as);\n        const rr = route_regex_1.getRouteRegex(route);\n        const routeMatch = route_matcher_1.getRouteMatcher(rr)(asPathname);\n\n        if (!routeMatch) {\n          console.error('The provided `as` value is incompatible with the `href` value. This is invalid. https://err.sh/zeit/next.js/incompatible-href-as');\n          return resolve(false);\n        } // Merge params into `query`, overwriting any specified in search\n\n\n        _Object$assign(query, routeMatch);\n      }\n\n      Router.events.emit('routeChangeStart', as); // If shallow is true and the route exists in the router cache we reuse the previous result\n      // @ts-ignore pathname is always a string\n\n      this.getRouteInfo(route, pathname, query, as, shallow).then(routeInfo => {\n        const {\n          error\n        } = routeInfo;\n\n        if (error && error.cancelled) {\n          return resolve(false);\n        }\n\n        Router.events.emit('beforeHistoryChange', as);\n        this.changeState(method, url, as, options);\n        const hash = window.location.hash.substring(1);\n\n        if (process.env.NODE_ENV !== 'production') {\n          const appComp = this.components['/_app'].Component;\n          window.next.isPrerendered = appComp.getInitialProps === appComp.origGetInitialProps && !routeInfo.Component.getInitialProps;\n        } // @ts-ignore pathname is always defined\n\n\n        this.set(route, pathname, query, as, _Object$assign({}, routeInfo, {\n          hash\n        }));\n\n        if (error) {\n          Router.events.emit('routeChangeError', error, as);\n          throw error;\n        }\n\n        Router.events.emit('routeChangeComplete', as);\n        return resolve(true);\n      }, reject);\n    });\n  }\n\n  changeState(method, url, as, options = {}) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof window.history === 'undefined') {\n        console.error(`Warning: window.history is not available.`);\n        return;\n      } // @ts-ignore method should always exist on history\n\n\n      if (typeof window.history[method] === 'undefined') {\n        console.error(`Warning: window.history.${method} is not available`);\n        return;\n      }\n    }\n\n    if (method !== 'pushState' || utils_1.getURL() !== as) {\n      // @ts-ignore method should always exist on history\n      window.history[method]({\n        url,\n        as,\n        options\n      }, null, as);\n    }\n  }\n\n  getRouteInfo(route, pathname, query, as, shallow = false) {\n    const cachedRouteInfo = this.components[route]; // If there is a shallow route transition possible\n    // If the route is already rendered on the screen.\n\n    if (shallow && cachedRouteInfo && this.route === route) {\n      return _Promise.resolve(cachedRouteInfo);\n    }\n\n    return new _Promise((resolve, reject) => {\n      if (cachedRouteInfo) {\n        return resolve(cachedRouteInfo);\n      }\n\n      this.fetchComponent(route).then(Component => resolve({\n        Component\n      }), reject);\n    }).then(routeInfo => {\n      const {\n        Component\n      } = routeInfo;\n\n      if (process.env.NODE_ENV !== 'production') {\n        const {\n          isValidElementType\n        } = require('react-is');\n\n        if (!isValidElementType(Component)) {\n          throw new Error(`The default export is not a React Component in page: \"${pathname}\"`);\n        }\n      }\n\n      return new _Promise((resolve, reject) => {\n        // we provide AppTree later so this needs to be `any`\n        this.getInitialProps(Component, {\n          pathname,\n          query,\n          asPath: as\n        }).then(props => {\n          routeInfo.props = props;\n          this.components[route] = routeInfo;\n          resolve(routeInfo);\n        }, reject);\n      });\n    }).catch(err => {\n      return new _Promise(resolve => {\n        if (err.code === 'PAGE_LOAD_ERROR') {\n          // If we can't load the page it could be one of following reasons\n          //  1. Page doesn't exists\n          //  2. Page does exist in a different zone\n          //  3. Internal error while loading the page\n          // So, doing a hard reload is the proper way to deal with this.\n          window.location.href = as; // Changing the URL doesn't block executing the current code path.\n          // So, we need to mark it as a cancelled error and stop the routing logic.\n\n          err.cancelled = true; // @ts-ignore TODO: fix the control flow here\n\n          return resolve({\n            error: err\n          });\n        }\n\n        if (err.cancelled) {\n          // @ts-ignore TODO: fix the control flow here\n          return resolve({\n            error: err\n          });\n        }\n\n        resolve(this.fetchComponent('/_error').then(Component => {\n          const routeInfo = {\n            Component,\n            err\n          };\n          return new _Promise(resolve => {\n            this.getInitialProps(Component, {\n              err,\n              pathname,\n              query\n            }).then(props => {\n              routeInfo.props = props;\n              routeInfo.error = err;\n              resolve(routeInfo);\n            }, gipErr => {\n              console.error('Error in error page `getInitialProps`: ', gipErr);\n              routeInfo.error = err;\n              routeInfo.props = {};\n              resolve(routeInfo);\n            });\n          });\n        }));\n      });\n    });\n  }\n\n  set(route, pathname, query, as, data) {\n    this.route = route;\n    this.pathname = pathname;\n    this.query = query;\n    this.asPath = as;\n    this.notify(data);\n  }\n  /**\r\n   * Callback to execute before replacing router state\r\n   * @param cb callback to be executed\r\n   */\n\n\n  beforePopState(cb) {\n    this._bps = cb;\n  }\n\n  onlyAHashChange(as) {\n    if (!this.asPath) return false;\n    const [oldUrlNoHash, oldHash] = this.asPath.split('#');\n    const [newUrlNoHash, newHash] = as.split('#'); // Makes sure we scroll to the provided hash if the url/hash are the same\n\n    if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n      return true;\n    } // If the urls are change, there's more than a hash change\n\n\n    if (oldUrlNoHash !== newUrlNoHash) {\n      return false;\n    } // If the hash has changed, then it's a hash only change.\n    // This check is necessary to handle both the enter and\n    // leave hash === '' cases. The identity case falls through\n    // and is treated as a next reload.\n\n\n    return oldHash !== newHash;\n  }\n\n  scrollToHash(as) {\n    const [, hash] = as.split('#'); // Scroll to top if the hash is just `#` with no value\n\n    if (hash === '') {\n      window.scrollTo(0, 0);\n      return;\n    } // First we check if the element by id is found\n\n\n    const idEl = document.getElementById(hash);\n\n    if (idEl) {\n      idEl.scrollIntoView();\n      return;\n    } // If there's no element with the id, we check the `name` property\n    // To mirror browsers\n\n\n    const nameEl = document.getElementsByName(hash)[0];\n\n    if (nameEl) {\n      nameEl.scrollIntoView();\n    }\n  }\n\n  urlIsNew(asPath) {\n    return this.asPath !== asPath;\n  }\n  /**\r\n   * Prefetch `page` code, you may wait for the data during `page` rendering.\r\n   * This feature only works in production!\r\n   * @param url of prefetched `page`\r\n   */\n\n\n  prefetch(url) {\n    return new _Promise((resolve, reject) => {\n      const {\n        pathname,\n        protocol\n      } = url_1.parse(url);\n\n      if (!pathname || protocol) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`Invalid href passed to router: ${url} https://err.sh/zeit/next.js/invalid-href-passed`);\n        }\n\n        return;\n      } // Prefetch is not supported in development mode because it would trigger on-demand-entries\n\n\n      if (process.env.NODE_ENV !== 'production') return; // @ts-ignore pathname is always defined\n\n      const route = toRoute(pathname);\n      this.pageLoader.prefetch(route).then(resolve, reject);\n    });\n  }\n\n  async fetchComponent(route) {\n    let cancelled = false;\n\n    const cancel = this.clc = () => {\n      cancelled = true;\n    };\n\n    const Component = await this.pageLoader.loadPage(route);\n\n    if (cancelled) {\n      const error = new Error(`Abort fetching component for route: \"${route}\"`);\n      error.cancelled = true;\n      throw error;\n    }\n\n    if (cancel === this.clc) {\n      this.clc = null;\n    }\n\n    return Component;\n  }\n\n  async getInitialProps(Component, ctx) {\n    let cancelled = false;\n\n    const cancel = () => {\n      cancelled = true;\n    };\n\n    this.clc = cancel;\n    const {\n      Component: App\n    } = this.components['/_app'];\n    let props;\n\n    if ( // @ts-ignore workaround for dead-code elimination\n    (self.__HAS_SPR || process.env.NODE_ENV !== 'production') && Component.__NEXT_SPR) {\n      let status;\n      const {\n        pathname\n      } = url_1.parse(ctx.asPath || ctx.pathname);\n      props = await fetch(`/_next/data${pathname}.json`).then(res => {\n        if (!res.ok) {\n          status = res.status;\n          throw new Error('failed to load prerender data');\n        }\n\n        return res.json();\n      }).catch(err => {\n        console.error(`Failed to load data`, status, err);\n        window.location.href = pathname;\n        return new _Promise(() => {});\n      });\n    } else {\n      const AppTree = this._wrapApp(App);\n\n      ctx.AppTree = AppTree;\n      props = await utils_1.loadGetInitialProps(App, {\n        AppTree,\n        Component,\n        router: this,\n        ctx\n      });\n    }\n\n    if (cancel === this.clc) {\n      this.clc = null;\n    }\n\n    if (cancelled) {\n      const err = new Error('Loading initial props cancelled');\n      err.cancelled = true;\n      throw err;\n    }\n\n    return props;\n  }\n\n  abortComponentLoad(as) {\n    if (this.clc) {\n      const e = new Error('Route Cancelled');\n      e.cancelled = true;\n      Router.events.emit('routeChangeError', e, as);\n      this.clc();\n      this.clc = null;\n    }\n  }\n\n  notify(data) {\n    this.sub(data, this.components['/_app'].Component);\n  }\n\n}\n\nRouter.events = mitt_1.default();\nexports.default = Router;","map":{"version":3,"sources":["E:/Documentos/Proyectos/bucha/bucciarati/node_modules/next/dist/next-server/lib/router/router.js"],"names":["__importDefault","mod","__esModule","exports","value","url_1","require","mitt_1","utils_1","rewrite_url_for_export_1","route_matcher_1","route_regex_1","is_dynamic_1","toRoute","path","replace","Router","constructor","pathname","query","as","initialProps","pageLoader","App","wrapApp","Component","err","subscription","onPopState","e","state","changeState","formatWithValidation","getURL","options","fromExternal","_bps","url","process","env","NODE_ENV","console","warn","route","components","props","events","asPath","isDynamicRoute","__NEXT_DATA__","nextExport","sub","clc","_wrapApp","window","addEventListener","history","_rewriteUrlForNextExport","rewriteUrlForNextExport","update","default","data","Error","newData","notify","reload","location","back","push","change","method","_url","_as","resolve","reject","SUPPORTS_PERFORMANCE_USER_TIMING","performance","mark","__NEXT_EXPORT_TRAILING_SLASH","abortComponentLoad","_h","onlyAHashChange","emit","scrollToHash","protocol","parse","urlIsNew","shallow","asPathname","rr","getRouteRegex","routeMatch","getRouteMatcher","error","getRouteInfo","then","routeInfo","cancelled","hash","substring","appComp","next","isPrerendered","getInitialProps","origGetInitialProps","set","cachedRouteInfo","fetchComponent","isValidElementType","catch","code","href","gipErr","beforePopState","cb","oldUrlNoHash","oldHash","split","newUrlNoHash","newHash","scrollTo","idEl","document","getElementById","scrollIntoView","nameEl","getElementsByName","prefetch","cancel","loadPage","ctx","self","__HAS_SPR","__NEXT_SPR","status","fetch","res","ok","json","AppTree","loadGetInitialProps","router"],"mappings":"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","sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst url_1 = require(\"url\");\r\nconst mitt_1 = __importDefault(require(\"../mitt\"));\r\nconst utils_1 = require(\"../utils\");\r\nconst rewrite_url_for_export_1 = require(\"./rewrite-url-for-export\");\r\nconst route_matcher_1 = require(\"./utils/route-matcher\");\r\nconst route_regex_1 = require(\"./utils/route-regex\");\r\nconst is_dynamic_1 = require(\"./utils/is-dynamic\");\r\nfunction toRoute(path) {\r\n    return path.replace(/\\/$/, '') || '/';\r\n}\r\nclass Router {\r\n    constructor(pathname, query, as, { initialProps, pageLoader, App, wrapApp, Component, err, subscription, }) {\r\n        this.onPopState = (e) => {\r\n            if (!e.state) {\r\n                // We get state as undefined for two reasons.\r\n                //  1. With older safari (< 8) and older chrome (< 34)\r\n                //  2. When the URL changed with #\r\n                //\r\n                // In the both cases, we don't need to proceed and change the route.\r\n                // (as it's already changed)\r\n                // But we can simply replace the state with the new changes.\r\n                // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\r\n                // So, doing the following for (1) does no harm.\r\n                const { pathname, query } = this;\r\n                this.changeState('replaceState', utils_1.formatWithValidation({ pathname, query }), utils_1.getURL());\r\n                return;\r\n            }\r\n            // Make sure we don't re-render on initial load,\r\n            // can be caused by navigating back from an external site\r\n            if (e.state.options && e.state.options.fromExternal) {\r\n                return;\r\n            }\r\n            // If the downstream application returns falsy, return.\r\n            // They will then be responsible for handling the event.\r\n            if (this._bps && !this._bps(e.state)) {\r\n                return;\r\n            }\r\n            const { url, as, options } = e.state;\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                if (typeof url === 'undefined' || typeof as === 'undefined') {\r\n                    console.warn('`popstate` event triggered but `event.state` did not have `url` or `as` https://err.sh/zeit/next.js/popstate-state-empty');\r\n                }\r\n            }\r\n            this.replace(url, as, options);\r\n        };\r\n        // represents the current component key\r\n        this.route = toRoute(pathname);\r\n        // set up the component cache (by route keys)\r\n        this.components = {};\r\n        // We should not keep the cache, if there's an error\r\n        // Otherwise, this cause issues when when going back and\r\n        // come again to the errored page.\r\n        if (pathname !== '/_error') {\r\n            this.components[this.route] = { Component, props: initialProps, err };\r\n        }\r\n        this.components['/_app'] = { Component: App };\r\n        // Backwards compat for Router.router.events\r\n        // TODO: Should be remove the following major version as it was never documented\r\n        // @ts-ignore backwards compatibility\r\n        this.events = Router.events;\r\n        this.pageLoader = pageLoader;\r\n        this.pathname = pathname;\r\n        this.query = query;\r\n        // if auto prerendered and dynamic route wait to update asPath\r\n        // until after mount to prevent hydration mismatch\r\n        this.asPath =\r\n            // @ts-ignore this is temporarily global (attached to window)\r\n            is_dynamic_1.isDynamicRoute(pathname) && __NEXT_DATA__.nextExport ? pathname : as;\r\n        this.sub = subscription;\r\n        this.clc = null;\r\n        this._wrapApp = wrapApp;\r\n        if (typeof window !== 'undefined') {\r\n            // in order for `e.state` to work on the `onpopstate` event\r\n            // we have to register the initial route upon initialization\r\n            this.changeState('replaceState', utils_1.formatWithValidation({ pathname, query }), as);\r\n            window.addEventListener('popstate', this.onPopState);\r\n            window.addEventListener('unload', () => {\r\n                // Workaround for popstate firing on initial page load when\r\n                // navigating back from an external site\r\n                if (history.state) {\r\n                    const { url, as, options } = history.state;\r\n                    this.changeState('replaceState', url, as, Object.assign({}, options, { fromExternal: true }));\r\n                }\r\n            });\r\n        }\r\n    }\r\n    // @deprecated backwards compatibility even though it's a private method.\r\n    static _rewriteUrlForNextExport(url) {\r\n        return rewrite_url_for_export_1.rewriteUrlForNextExport(url);\r\n    }\r\n    update(route, mod) {\r\n        const Component = mod.default || mod;\r\n        const data = this.components[route];\r\n        if (!data) {\r\n            throw new Error(`Cannot update unavailable route: ${route}`);\r\n        }\r\n        const newData = Object.assign({}, data, { Component });\r\n        this.components[route] = newData;\r\n        // pages/_app.js updated\r\n        if (route === '/_app') {\r\n            this.notify(this.components[this.route]);\r\n            return;\r\n        }\r\n        if (route === this.route) {\r\n            this.notify(newData);\r\n        }\r\n    }\r\n    reload() {\r\n        window.location.reload();\r\n    }\r\n    /**\r\n     * Go back in history\r\n     */\r\n    back() {\r\n        window.history.back();\r\n    }\r\n    /**\r\n     * Performs a `pushState` with arguments\r\n     * @param url of the route\r\n     * @param as masks `url` for the browser\r\n     * @param options object you can define `shallow` and other options\r\n     */\r\n    push(url, as = url, options = {}) {\r\n        return this.change('pushState', url, as, options);\r\n    }\r\n    /**\r\n     * Performs a `replaceState` with arguments\r\n     * @param url of the route\r\n     * @param as masks `url` for the browser\r\n     * @param options object you can define `shallow` and other options\r\n     */\r\n    replace(url, as = url, options = {}) {\r\n        return this.change('replaceState', url, as, options);\r\n    }\r\n    change(method, _url, _as, options) {\r\n        return new Promise((resolve, reject) => {\r\n            // marking route changes as a navigation start entry\r\n            if (utils_1.SUPPORTS_PERFORMANCE_USER_TIMING) {\r\n                performance.mark('routeChange');\r\n            }\r\n            // If url and as provided as an object representation,\r\n            // we'll format them into the string version here.\r\n            const url = typeof _url === 'object' ? utils_1.formatWithValidation(_url) : _url;\r\n            let as = typeof _as === 'object' ? utils_1.formatWithValidation(_as) : _as;\r\n            // Add the ending slash to the paths. So, we can serve the\r\n            // \"<page>/index.html\" directly for the SSR page.\r\n            if (process.env.__NEXT_EXPORT_TRAILING_SLASH) {\r\n                // @ts-ignore this is temporarily global (attached to window)\r\n                if (__NEXT_DATA__.nextExport) {\r\n                    as = rewrite_url_for_export_1.rewriteUrlForNextExport(as);\r\n                }\r\n            }\r\n            this.abortComponentLoad(as);\r\n            // If the url change is only related to a hash change\r\n            // We should not proceed. We should only change the state.\r\n            // WARNING: `_h` is an internal option for handing Next.js client-side\r\n            // hydration. Your app should _never_ use this property. It may change at\r\n            // any time without notice.\r\n            if (!options._h && this.onlyAHashChange(as)) {\r\n                this.asPath = as;\r\n                Router.events.emit('hashChangeStart', as);\r\n                this.changeState(method, url, as);\r\n                this.scrollToHash(as);\r\n                Router.events.emit('hashChangeComplete', as);\r\n                return resolve(true);\r\n            }\r\n            const { pathname, query, protocol } = url_1.parse(url, true);\r\n            if (!pathname || protocol) {\r\n                if (process.env.NODE_ENV !== 'production') {\r\n                    throw new Error(`Invalid href passed to router: ${url} https://err.sh/zeit/next.js/invalid-href-passed`);\r\n                }\r\n                return resolve(false);\r\n            }\r\n            // If asked to change the current URL we should reload the current page\r\n            // (not location.reload() but reload getInitialProps and other Next.js stuffs)\r\n            // We also need to set the method = replaceState always\r\n            // as this should not go into the history (That's how browsers work)\r\n            // We should compare the new asPath to the current asPath, not the url\r\n            if (!this.urlIsNew(as)) {\r\n                method = 'replaceState';\r\n            }\r\n            // @ts-ignore pathname is always a string\r\n            const route = toRoute(pathname);\r\n            const { shallow = false } = options;\r\n            if (is_dynamic_1.isDynamicRoute(route)) {\r\n                const { pathname: asPathname } = url_1.parse(as);\r\n                const rr = route_regex_1.getRouteRegex(route);\r\n                const routeMatch = route_matcher_1.getRouteMatcher(rr)(asPathname);\r\n                if (!routeMatch) {\r\n                    console.error('The provided `as` value is incompatible with the `href` value. This is invalid. https://err.sh/zeit/next.js/incompatible-href-as');\r\n                    return resolve(false);\r\n                }\r\n                // Merge params into `query`, overwriting any specified in search\r\n                Object.assign(query, routeMatch);\r\n            }\r\n            Router.events.emit('routeChangeStart', as);\r\n            // If shallow is true and the route exists in the router cache we reuse the previous result\r\n            // @ts-ignore pathname is always a string\r\n            this.getRouteInfo(route, pathname, query, as, shallow).then(routeInfo => {\r\n                const { error } = routeInfo;\r\n                if (error && error.cancelled) {\r\n                    return resolve(false);\r\n                }\r\n                Router.events.emit('beforeHistoryChange', as);\r\n                this.changeState(method, url, as, options);\r\n                const hash = window.location.hash.substring(1);\r\n                if (process.env.NODE_ENV !== 'production') {\r\n                    const appComp = this.components['/_app'].Component;\r\n                    window.next.isPrerendered =\r\n                        appComp.getInitialProps === appComp.origGetInitialProps &&\r\n                            !routeInfo.Component.getInitialProps;\r\n                }\r\n                // @ts-ignore pathname is always defined\r\n                this.set(route, pathname, query, as, Object.assign({}, routeInfo, { hash }));\r\n                if (error) {\r\n                    Router.events.emit('routeChangeError', error, as);\r\n                    throw error;\r\n                }\r\n                Router.events.emit('routeChangeComplete', as);\r\n                return resolve(true);\r\n            }, reject);\r\n        });\r\n    }\r\n    changeState(method, url, as, options = {}) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (typeof window.history === 'undefined') {\r\n                console.error(`Warning: window.history is not available.`);\r\n                return;\r\n            }\r\n            // @ts-ignore method should always exist on history\r\n            if (typeof window.history[method] === 'undefined') {\r\n                console.error(`Warning: window.history.${method} is not available`);\r\n                return;\r\n            }\r\n        }\r\n        if (method !== 'pushState' || utils_1.getURL() !== as) {\r\n            // @ts-ignore method should always exist on history\r\n            window.history[method]({ url, as, options }, null, as);\r\n        }\r\n    }\r\n    getRouteInfo(route, pathname, query, as, shallow = false) {\r\n        const cachedRouteInfo = this.components[route];\r\n        // If there is a shallow route transition possible\r\n        // If the route is already rendered on the screen.\r\n        if (shallow && cachedRouteInfo && this.route === route) {\r\n            return Promise.resolve(cachedRouteInfo);\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            if (cachedRouteInfo) {\r\n                return resolve(cachedRouteInfo);\r\n            }\r\n            this.fetchComponent(route).then(Component => resolve({ Component }), reject);\r\n        })\r\n            .then((routeInfo) => {\r\n            const { Component } = routeInfo;\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                const { isValidElementType } = require('react-is');\r\n                if (!isValidElementType(Component)) {\r\n                    throw new Error(`The default export is not a React Component in page: \"${pathname}\"`);\r\n                }\r\n            }\r\n            return new Promise((resolve, reject) => {\r\n                // we provide AppTree later so this needs to be `any`\r\n                this.getInitialProps(Component, {\r\n                    pathname,\r\n                    query,\r\n                    asPath: as,\r\n                }).then(props => {\r\n                    routeInfo.props = props;\r\n                    this.components[route] = routeInfo;\r\n                    resolve(routeInfo);\r\n                }, reject);\r\n            });\r\n        })\r\n            .catch(err => {\r\n            return new Promise(resolve => {\r\n                if (err.code === 'PAGE_LOAD_ERROR') {\r\n                    // If we can't load the page it could be one of following reasons\r\n                    //  1. Page doesn't exists\r\n                    //  2. Page does exist in a different zone\r\n                    //  3. Internal error while loading the page\r\n                    // So, doing a hard reload is the proper way to deal with this.\r\n                    window.location.href = as;\r\n                    // Changing the URL doesn't block executing the current code path.\r\n                    // So, we need to mark it as a cancelled error and stop the routing logic.\r\n                    err.cancelled = true;\r\n                    // @ts-ignore TODO: fix the control flow here\r\n                    return resolve({ error: err });\r\n                }\r\n                if (err.cancelled) {\r\n                    // @ts-ignore TODO: fix the control flow here\r\n                    return resolve({ error: err });\r\n                }\r\n                resolve(this.fetchComponent('/_error').then(Component => {\r\n                    const routeInfo = { Component, err };\r\n                    return new Promise(resolve => {\r\n                        this.getInitialProps(Component, {\r\n                            err,\r\n                            pathname,\r\n                            query,\r\n                        }).then(props => {\r\n                            routeInfo.props = props;\r\n                            routeInfo.error = err;\r\n                            resolve(routeInfo);\r\n                        }, gipErr => {\r\n                            console.error('Error in error page `getInitialProps`: ', gipErr);\r\n                            routeInfo.error = err;\r\n                            routeInfo.props = {};\r\n                            resolve(routeInfo);\r\n                        });\r\n                    });\r\n                }));\r\n            });\r\n        });\r\n    }\r\n    set(route, pathname, query, as, data) {\r\n        this.route = route;\r\n        this.pathname = pathname;\r\n        this.query = query;\r\n        this.asPath = as;\r\n        this.notify(data);\r\n    }\r\n    /**\r\n     * Callback to execute before replacing router state\r\n     * @param cb callback to be executed\r\n     */\r\n    beforePopState(cb) {\r\n        this._bps = cb;\r\n    }\r\n    onlyAHashChange(as) {\r\n        if (!this.asPath)\r\n            return false;\r\n        const [oldUrlNoHash, oldHash] = this.asPath.split('#');\r\n        const [newUrlNoHash, newHash] = as.split('#');\r\n        // Makes sure we scroll to the provided hash if the url/hash are the same\r\n        if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\r\n            return true;\r\n        }\r\n        // If the urls are change, there's more than a hash change\r\n        if (oldUrlNoHash !== newUrlNoHash) {\r\n            return false;\r\n        }\r\n        // If the hash has changed, then it's a hash only change.\r\n        // This check is necessary to handle both the enter and\r\n        // leave hash === '' cases. The identity case falls through\r\n        // and is treated as a next reload.\r\n        return oldHash !== newHash;\r\n    }\r\n    scrollToHash(as) {\r\n        const [, hash] = as.split('#');\r\n        // Scroll to top if the hash is just `#` with no value\r\n        if (hash === '') {\r\n            window.scrollTo(0, 0);\r\n            return;\r\n        }\r\n        // First we check if the element by id is found\r\n        const idEl = document.getElementById(hash);\r\n        if (idEl) {\r\n            idEl.scrollIntoView();\r\n            return;\r\n        }\r\n        // If there's no element with the id, we check the `name` property\r\n        // To mirror browsers\r\n        const nameEl = document.getElementsByName(hash)[0];\r\n        if (nameEl) {\r\n            nameEl.scrollIntoView();\r\n        }\r\n    }\r\n    urlIsNew(asPath) {\r\n        return this.asPath !== asPath;\r\n    }\r\n    /**\r\n     * Prefetch `page` code, you may wait for the data during `page` rendering.\r\n     * This feature only works in production!\r\n     * @param url of prefetched `page`\r\n     */\r\n    prefetch(url) {\r\n        return new Promise((resolve, reject) => {\r\n            const { pathname, protocol } = url_1.parse(url);\r\n            if (!pathname || protocol) {\r\n                if (process.env.NODE_ENV !== 'production') {\r\n                    throw new Error(`Invalid href passed to router: ${url} https://err.sh/zeit/next.js/invalid-href-passed`);\r\n                }\r\n                return;\r\n            }\r\n            // Prefetch is not supported in development mode because it would trigger on-demand-entries\r\n            if (process.env.NODE_ENV !== 'production')\r\n                return;\r\n            // @ts-ignore pathname is always defined\r\n            const route = toRoute(pathname);\r\n            this.pageLoader.prefetch(route).then(resolve, reject);\r\n        });\r\n    }\r\n    async fetchComponent(route) {\r\n        let cancelled = false;\r\n        const cancel = (this.clc = () => {\r\n            cancelled = true;\r\n        });\r\n        const Component = await this.pageLoader.loadPage(route);\r\n        if (cancelled) {\r\n            const error = new Error(`Abort fetching component for route: \"${route}\"`);\r\n            error.cancelled = true;\r\n            throw error;\r\n        }\r\n        if (cancel === this.clc) {\r\n            this.clc = null;\r\n        }\r\n        return Component;\r\n    }\r\n    async getInitialProps(Component, ctx) {\r\n        let cancelled = false;\r\n        const cancel = () => {\r\n            cancelled = true;\r\n        };\r\n        this.clc = cancel;\r\n        const { Component: App } = this.components['/_app'];\r\n        let props;\r\n        if (\r\n        // @ts-ignore workaround for dead-code elimination\r\n        (self.__HAS_SPR || process.env.NODE_ENV !== 'production') &&\r\n            Component.__NEXT_SPR) {\r\n            let status;\r\n            const { pathname } = url_1.parse(ctx.asPath || ctx.pathname);\r\n            props = await fetch(`/_next/data${pathname}.json`)\r\n                .then(res => {\r\n                if (!res.ok) {\r\n                    status = res.status;\r\n                    throw new Error('failed to load prerender data');\r\n                }\r\n                return res.json();\r\n            })\r\n                .catch((err) => {\r\n                console.error(`Failed to load data`, status, err);\r\n                window.location.href = pathname;\r\n                return new Promise(() => { });\r\n            });\r\n        }\r\n        else {\r\n            const AppTree = this._wrapApp(App);\r\n            ctx.AppTree = AppTree;\r\n            props = await utils_1.loadGetInitialProps(App, {\r\n                AppTree,\r\n                Component,\r\n                router: this,\r\n                ctx,\r\n            });\r\n        }\r\n        if (cancel === this.clc) {\r\n            this.clc = null;\r\n        }\r\n        if (cancelled) {\r\n            const err = new Error('Loading initial props cancelled');\r\n            err.cancelled = true;\r\n            throw err;\r\n        }\r\n        return props;\r\n    }\r\n    abortComponentLoad(as) {\r\n        if (this.clc) {\r\n            const e = new Error('Route Cancelled');\r\n            e.cancelled = true;\r\n            Router.events.emit('routeChangeError', e, as);\r\n            this.clc();\r\n            this.clc = null;\r\n        }\r\n    }\r\n    notify(data) {\r\n        this.sub(data, this.components['/_app'].Component);\r\n    }\r\n}\r\nRouter.events = mitt_1.default();\r\nexports.default = Router;\r\n"]},"metadata":{},"sourceType":"script"}