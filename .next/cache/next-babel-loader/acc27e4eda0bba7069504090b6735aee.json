{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\n// lib/withApollo.js\nimport withApollo from 'next-with-apollo'; // import ApolloClient, { InMemoryCache } from 'apollo-boost';\n\nimport ApolloClient from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { createHttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nvar link = createHttpLink({\n  uri: 'https://chupetinps.herokuapp.com',\n  useGETForQueries: true\n});\nvar authLink = setContext(function (_, _ref) {\n  var headers = _ref.headers;\n  // get the authentication token from local storage if it exists\n  var user = localStorage.usuario;\n  var pass = localStorage.password; // return the headers to the context so httpLink can read them\n\n  return {\n    headers: _objectSpread({}, headers, {\n      usuario: user ? user : null,\n      password: pass ? pass : null\n    })\n  };\n});\nexport default withApollo(function (_ref2) {\n  var ctx = _ref2.ctx,\n      headers = _ref2.headers,\n      initialState = _ref2.initialState;\n  return new ApolloClient({\n    link: authLink.concat(link),\n    // link,\n    // fetchOptions : {\n    // \tuseGETForQueries : true\n    // },\n    // uri          : 'https://chupetinps.herokuapp.com',\n    // // https://chupetinps.herokuapp.com\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n}, {\n  getDataFromTree: 'never'\n});","map":null,"metadata":{},"sourceType":"module"}