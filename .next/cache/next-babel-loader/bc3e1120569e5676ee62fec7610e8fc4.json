{"ast":null,"code":"// lib/withApollo.js\nimport withApollo from 'next-with-apollo'; // import ApolloClient, { InMemoryCache } from 'apollo-boost';\n\nimport ApolloClient from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { createHttpLink } from 'apollo-link-http';\nvar link = createHttpLink({\n  uri: 'https://chupetinps.herokuapp.com'\n});\nvar authLink = setContext(function (_, _ref) {\n  var headers = _ref.headers;\n  // get the authentication token from local storage if it exists\n  var user = localStorage.usuario;\n  var pass = localStorage.password; // return the headers to the context so httpLink can read them\n\n  return {\n    headers: {\n      usuario: user ? user : null,\n      password: pass ? pass : null\n    }\n  };\n});\nexport default withApollo(function (_ref2) {\n  var ctx = _ref2.ctx,\n      headers = _ref2.headers,\n      initialState = _ref2.initialState;\n  return new ApolloClient({\n    link: authLink.concat(link),\n    // link,\n    // fetchOptions : {\n    // \tuseGETForQueries : true\n    // },\n    // uri          : 'https://chupetinps.herokuapp.com',\n    // // https://chupetinps.herokuapp.com\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n}, {\n  getDataFromTree: 'never'\n});","map":{"version":3,"sources":["C:\\Users\\Estacion\\Desktop\\Proyectos\\bucciarati-store\\lib\\withApollo.js"],"names":["withApollo","ApolloClient","InMemoryCache","createHttpLink","link","uri","authLink","setContext","_","headers","user","localStorage","usuario","pass","password","ctx","initialState","concat","cache","restore","getDataFromTree"],"mappings":"AAAA;AACA,OAAOA,UAAP,MAAuB,kBAAvB,C,CACA;;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,IAAMC,IAAI,GAAGD,cAAc,CAAC;AAC3BE,EAAAA,GAAG,EAAG;AADqB,CAAD,CAA3B;AAGA,IAAMC,QAAQ,GAAGC,UAAU,CAAC,UAACC,CAAD,QAAoB;AAAA,MAAdC,OAAc,QAAdA,OAAc;AAC/C;AACA,MAAMC,IAAI,GAAGC,YAAY,CAACC,OAA1B;AACA,MAAMC,IAAI,GAAGF,YAAY,CAACG,QAA1B,CAH+C,CAI/C;;AACA,SAAO;AACNL,IAAAA,OAAO,EAAG;AACTG,MAAAA,OAAO,EAAIF,IAAI,GAAGA,IAAH,GAAU,IADhB;AAETI,MAAAA,QAAQ,EAAGD,IAAI,GAAGA,IAAH,GAAU;AAFhB;AADJ,GAAP;AAMA,CAX0B,CAA3B;AAYA,eAAeb,UAAU,CACxB;AAAA,MAAGe,GAAH,SAAGA,GAAH;AAAA,MAAQN,OAAR,SAAQA,OAAR;AAAA,MAAiBO,YAAjB,SAAiBA,YAAjB;AAAA,SACC,IAAIf,YAAJ,CAAiB;AAChBG,IAAAA,IAAI,EAAIE,QAAQ,CAACW,MAAT,CAAgBb,IAAhB,CADQ;AAEhB;AACA;AACA;AACA;AACA;AACA;AAEAc,IAAAA,KAAK,EAAG,IAAIhB,aAAJ,GAAoBiB,OAApB,CAA4BH,YAAY,IAAI,EAA5C;AATQ,GAAjB,CADD;AAAA,CADwB,EAaxB;AACCI,EAAAA,eAAe,EAAG;AADnB,CAbwB,CAAzB","sourcesContent":["// lib/withApollo.js\r\nimport withApollo from 'next-with-apollo';\r\n// import ApolloClient, { InMemoryCache } from 'apollo-boost';\r\nimport ApolloClient from 'apollo-client';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport { createHttpLink } from 'apollo-link-http';\r\n\r\nconst link = createHttpLink({\r\n\turi : 'https://chupetinps.herokuapp.com'\r\n});\r\nconst authLink = setContext((_, { headers }) => {\r\n\t// get the authentication token from local storage if it exists\r\n\tconst user = localStorage.usuario;\r\n\tconst pass = localStorage.password;\r\n\t// return the headers to the context so httpLink can read them\r\n\treturn {\r\n\t\theaders : {\r\n\t\t\tusuario  : user ? user : null,\r\n\t\t\tpassword : pass ? pass : null\r\n\t\t}\r\n\t};\r\n});\r\nexport default withApollo(\r\n\t({ ctx, headers, initialState }) =>\r\n\t\tnew ApolloClient({\r\n\t\t\tlink  : authLink.concat(link),\r\n\t\t\t// link,\r\n\t\t\t// fetchOptions : {\r\n\t\t\t// \tuseGETForQueries : true\r\n\t\t\t// },\r\n\t\t\t// uri          : 'https://chupetinps.herokuapp.com',\r\n\t\t\t// // https://chupetinps.herokuapp.com\r\n\r\n\t\t\tcache : new InMemoryCache().restore(initialState || {})\r\n\t\t}),\r\n\t{\r\n\t\tgetDataFromTree : 'never'\r\n\t}\r\n);\r\n"]},"metadata":{},"sourceType":"module"}