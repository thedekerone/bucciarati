{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\n// lib/withApollo.js\nimport withApollo from 'next-with-apollo'; // import ApolloClient, { InMemoryCache } from 'apollo-boost';\n\nimport ApolloClient from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { createHttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context'; // // https://chupetinps.herokuapp.com\n\nconst link = createHttpLink({\n  uri: 'http://localhost:4000',\n  useGETForQueries: true\n});\nconst authLink = setContext((_, {\n  headers\n}) => {\n  // get the authentication token from local storage if it exists\n  const user = localStorage.usuario;\n  const pass = localStorage.password; // return the headers to the context so httpLink can read them\n\n  return {\n    headers: _objectSpread({}, headers, {\n      usuario: user ? user : null,\n      password: pass ? pass : null\n    })\n  };\n});\nexport default withApollo(({\n  ctx,\n  headers,\n  initialState\n}) => new ApolloClient({\n  link: authLink.concat(link),\n  cache: new InMemoryCache().restore(initialState || {})\n}), {\n  getDataFromTree: 'never'\n});","map":{"version":3,"sources":["/home/dekker/Documents/proyectos/bucciarati/lib/withApollo.js"],"names":["withApollo","ApolloClient","InMemoryCache","createHttpLink","setContext","link","uri","useGETForQueries","authLink","_","headers","user","localStorage","usuario","pass","password","ctx","initialState","concat","cache","restore","getDataFromTree"],"mappings":";AAAA;AACA,OAAOA,UAAP,MAAuB,kBAAvB,C,CACA;;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,UAAT,QAA2B,qBAA3B,C,CACA;;AAEA,MAAMC,IAAI,GAAGF,cAAc,CAAC;AAC1BG,EAAAA,GAAG,EAAE,uBADqB;AAE1BC,EAAAA,gBAAgB,EAAE;AAFQ,CAAD,CAA3B;AAIA,MAAMC,QAAQ,GAAGJ,UAAU,CAAC,CAACK,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAoB;AAC9C;AACA,QAAMC,IAAI,GAAGC,YAAY,CAACC,OAA1B;AACA,QAAMC,IAAI,GAAGF,YAAY,CAACG,QAA1B,CAH8C,CAI9C;;AACA,SAAO;AACLL,IAAAA,OAAO,oBACFA,OADE;AAELG,MAAAA,OAAO,EAAEF,IAAI,GAAGA,IAAH,GAAU,IAFlB;AAGLI,MAAAA,QAAQ,EAAED,IAAI,GAAGA,IAAH,GAAU;AAHnB;AADF,GAAP;AAOD,CAZ0B,CAA3B;AAaA,eAAed,UAAU,CACvB,CAAC;AAAEgB,EAAAA,GAAF;AAAON,EAAAA,OAAP;AAAgBO,EAAAA;AAAhB,CAAD,KACE,IAAIhB,YAAJ,CAAiB;AACfI,EAAAA,IAAI,EAAEG,QAAQ,CAACU,MAAT,CAAgBb,IAAhB,CADS;AAGfc,EAAAA,KAAK,EAAE,IAAIjB,aAAJ,GAAoBkB,OAApB,CAA4BH,YAAY,IAAI,EAA5C;AAHQ,CAAjB,CAFqB,EAOvB;AACEI,EAAAA,eAAe,EAAE;AADnB,CAPuB,CAAzB","sourcesContent":["// lib/withApollo.js\nimport withApollo from 'next-with-apollo'\n// import ApolloClient, { InMemoryCache } from 'apollo-boost';\nimport ApolloClient from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { createHttpLink } from 'apollo-link-http'\nimport { setContext } from 'apollo-link-context'\n// // https://chupetinps.herokuapp.com\n\nconst link = createHttpLink({\n  uri: 'http://localhost:4000',\n  useGETForQueries: true\n})\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const user = localStorage.usuario\n  const pass = localStorage.password\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      usuario: user ? user : null,\n      password: pass ? pass : null\n    }\n  }\n})\nexport default withApollo(\n  ({ ctx, headers, initialState }) =>\n    new ApolloClient({\n      link: authLink.concat(link),\n\n      cache: new InMemoryCache().restore(initialState || {})\n    }),\n  {\n    getDataFromTree: 'never'\n  }\n)\n"]},"metadata":{},"sourceType":"module"}