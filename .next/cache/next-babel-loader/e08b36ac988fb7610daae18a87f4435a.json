{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\n// lib/withApollo.js\nimport withApollo from 'next-with-apollo'; // import ApolloClient, { InMemoryCache } from 'apollo-boost';\n\nimport ApolloClient from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { createHttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context'; // // https://chupetinps.herokuapp.com\n\nvar link = createHttpLink({\n  uri: 'https://chupetinps.herokuapp.com',\n  useGETForQueries: true\n});\nvar authLink = setContext(function (_, _ref) {\n  var headers = _ref.headers;\n  // get the authentication token from local storage if it exists\n  var user = localStorage.usuario;\n  var pass = localStorage.password; // return the headers to the context so httpLink can read them\n\n  return {\n    headers: _objectSpread({}, headers, {\n      usuario: user ? user : null,\n      password: pass ? pass : null\n    })\n  };\n});\nexport default withApollo(function (_ref2) {\n  var ctx = _ref2.ctx,\n      headers = _ref2.headers,\n      initialState = _ref2.initialState;\n  return new ApolloClient({\n    link: authLink.concat(link),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n}, {\n  getDataFromTree: 'never'\n});","map":{"version":3,"sources":["E:/Documentos/Proyectos/bucha/bucciarati/lib/withApollo.js"],"names":["withApollo","ApolloClient","InMemoryCache","createHttpLink","setContext","link","uri","useGETForQueries","authLink","_","headers","user","localStorage","usuario","pass","password","ctx","initialState","concat","cache","restore","getDataFromTree"],"mappings":";AAAA;AACA,OAAOA,UAAP,MAAuB,kBAAvB,C,CACA;;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,UAAT,QAA2B,qBAA3B,C,CACA;;AAEA,IAAMC,IAAI,GAAGF,cAAc,CAAC;AAC1BG,EAAAA,GAAG,EAAE,kCADqB;AAE1BC,EAAAA,gBAAgB,EAAE;AAFQ,CAAD,CAA3B;AAIA,IAAMC,QAAQ,GAAGJ,UAAU,CAAC,UAACK,CAAD,QAAoB;AAAA,MAAdC,OAAc,QAAdA,OAAc;AAC9C;AACA,MAAMC,IAAI,GAAGC,YAAY,CAACC,OAA1B;AACA,MAAMC,IAAI,GAAGF,YAAY,CAACG,QAA1B,CAH8C,CAI9C;;AACA,SAAO;AACLL,IAAAA,OAAO,oBACFA,OADE;AAELG,MAAAA,OAAO,EAAEF,IAAI,GAAGA,IAAH,GAAU,IAFlB;AAGLI,MAAAA,QAAQ,EAAED,IAAI,GAAGA,IAAH,GAAU;AAHnB;AADF,GAAP;AAOD,CAZ0B,CAA3B;AAaA,eAAed,UAAU,CACvB;AAAA,MAAGgB,GAAH,SAAGA,GAAH;AAAA,MAAQN,OAAR,SAAQA,OAAR;AAAA,MAAiBO,YAAjB,SAAiBA,YAAjB;AAAA,SACE,IAAIhB,YAAJ,CAAiB;AACfI,IAAAA,IAAI,EAAEG,QAAQ,CAACU,MAAT,CAAgBb,IAAhB,CADS;AAGfc,IAAAA,KAAK,EAAE,IAAIjB,aAAJ,GAAoBkB,OAApB,CAA4BH,YAAY,IAAI,EAA5C;AAHQ,GAAjB,CADF;AAAA,CADuB,EAOvB;AACEI,EAAAA,eAAe,EAAE;AADnB,CAPuB,CAAzB","sourcesContent":["// lib/withApollo.js\r\nimport withApollo from 'next-with-apollo'\r\n// import ApolloClient, { InMemoryCache } from 'apollo-boost';\r\nimport ApolloClient from 'apollo-client'\r\nimport { InMemoryCache } from 'apollo-cache-inmemory'\r\nimport { createHttpLink } from 'apollo-link-http'\r\nimport { setContext } from 'apollo-link-context'\r\n// // https://chupetinps.herokuapp.com\r\n\r\nconst link = createHttpLink({\r\n  uri: 'https://chupetinps.herokuapp.com',\r\n  useGETForQueries: true\r\n})\r\nconst authLink = setContext((_, { headers }) => {\r\n  // get the authentication token from local storage if it exists\r\n  const user = localStorage.usuario\r\n  const pass = localStorage.password\r\n  // return the headers to the context so httpLink can read them\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      usuario: user ? user : null,\r\n      password: pass ? pass : null\r\n    }\r\n  }\r\n})\r\nexport default withApollo(\r\n  ({ ctx, headers, initialState }) =>\r\n    new ApolloClient({\r\n      link: authLink.concat(link),\r\n\r\n      cache: new InMemoryCache().restore(initialState || {})\r\n    }),\r\n  {\r\n    getDataFromTree: 'never'\r\n  }\r\n)\r\n"]},"metadata":{},"sourceType":"module"}